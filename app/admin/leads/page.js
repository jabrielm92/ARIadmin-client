'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport AdminLayout from '@/components/AdminLayout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { TrendingUp, Search, Download, Eye, Phone, Mail, Building } from 'lucide-react';\n\nexport default function AdminLeadsPage() {\n  const router = useRouter();\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [clientFilter, setClientFilter] = useState('all');\n  const [selectedLead, setSelectedLead] = useState(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [clients, setClients] = useState([]);\n\n  useEffect(() => {\n    fetchClients();\n  }, []);\n\n  const fetchClients = async () => {\n    try {\n      const response = await fetch('/api/clients');\n      const data = await response.json();\n      if (data.success) {\n        setClients(data.clients);\n      }\n    } catch (error) {\n      console.error('Error fetching clients:', error);\n    }\n  };\n\n  // Mock leads data - in production, fetch from API\n  const allLeads = [\n    {\n      id: '1',\n      clientId: clients[0]?.clientId || 'client-1',\n      clientName: clients[0]?.businessName || 'ABC Healthcare',\n      name: 'John Doe',\n      email: 'john@example.com',\n      phone: '+1-555-0123',\n      company: 'Tech Corp',\n      source: 'AI Receptionist',\n      status: 'new',\n      score: 85,\n      interest: 'Premium Service',\n      createdAt: new Date().toISOString()\n    },\n    {\n      id: '2',\n      clientId: clients[1]?.clientId || 'client-2',\n      clientName: clients[1]?.businessName || 'Premier Legal',\n      name: 'Jane Smith',\n      email: 'jane@example.com',\n      phone: '+1-555-0456',\n      company: 'Design Studio',\n      source: 'Landing Page',\n      status: 'contacted',\n      score: 72,\n      interest: 'Consultation',\n      createdAt: new Date().toISOString()\n    }\n  ];\n\n  const filteredLeads = allLeads.filter(lead => {\n    const matchesSearch = \n      lead.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      lead.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      lead.company?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === 'all' || lead.status === statusFilter;\n    const matchesClient = clientFilter === 'all' || lead.clientId === clientFilter;\n    \n    return matchesSearch && matchesStatus && matchesClient;\n  });\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'new': return 'bg-blue-500';\n      case 'contacted': return 'bg-yellow-500';\n      case 'qualified': return 'bg-purple-500';\n      case 'appointment-set': return 'bg-orange-500';\n      case 'converted': return 'bg-green-500';\n      case 'lost': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getScoreColor = (score) => {\n    if (score >= 80) return 'text-green-600';\n    if (score >= 60) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const handleViewLead = (lead) => {\n    setSelectedLead(lead);\n    setDialogOpen(true);\n  };\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">All Leads</h1>\n            <p className=\"text-muted-foreground\">System-wide lead management</p>\n          </div>\n          <Button variant=\"outline\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export All\n          </Button>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid gap-4 md:grid-cols-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Leads</p>\n                  <p className=\"text-2xl font-bold\">{allLeads.length}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">All time</p>\n                </div>\n                <TrendingUp className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">New</p>\n                  <p className=\"text-2xl font-bold\">{allLeads.filter(l => l.status === 'new').length}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">Uncontacted</p>\n                </div>\n                <Mail className=\"h-8 w-8 text-yellow-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Qualified</p>\n                  <p className=\"text-2xl font-bold\">{allLeads.filter(l => l.status === 'qualified').length}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">Ready to convert</p>\n                </div>\n                <Phone className=\"h-8 w-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Converted</p>\n                  <p className=\"text-2xl font-bold\">{allLeads.filter(l => l.status === 'converted').length}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">Success rate</p>\n                </div>\n                <TrendingUp className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Leads Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Lead Database</CardTitle>\n            <CardDescription>All leads across all clients</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* Filters */}\n            <div className=\"flex gap-4 mb-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search leads...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n              <Select value={clientFilter} onValueChange={setClientFilter}>\n                <SelectTrigger className=\"w-[200px]\">\n                  <SelectValue placeholder=\"All Clients\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Clients</SelectItem>\n                  {clients.map(client => (\n                    <SelectItem key={client.clientId} value={client.clientId}>\n                      {client.businessName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[200px]\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"new\">New</SelectItem>\n                  <SelectItem value=\"contacted\">Contacted</SelectItem>\n                  <SelectItem value=\"qualified\">Qualified</SelectItem>\n                  <SelectItem value=\"appointment-set\">Appointment Set</SelectItem>\n                  <SelectItem value=\"converted\">Converted</SelectItem>\n                  <SelectItem value=\"lost\">Lost</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Table */}\n            {filteredLeads.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <TrendingUp className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-lg font-medium\">No leads found</p>\n                <p className=\"text-sm text-muted-foreground\">Try adjusting your filters</p>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Client</TableHead>\n                    <TableHead>Contact</TableHead>\n                    <TableHead>Company</TableHead>\n                    <TableHead>Source</TableHead>\n                    <TableHead>Score</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Created</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredLeads.map((lead) => (\n                    <TableRow key={lead.id}>\n                      <TableCell className=\"font-medium\">{lead.name}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Building className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"text-sm\">{lead.clientName}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"text-sm\">\n                          <div>{lead.email}</div>\n                          <div className=\"text-muted-foreground\">{lead.phone}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{lead.company || 'N/A'}</TableCell>\n                      <TableCell>{lead.source}</TableCell>\n                      <TableCell>\n                        <span className={`font-bold ${getScoreColor(lead.score)}`}>\n                          {lead.score}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={getStatusColor(lead.status)}>\n                          {lead.status.replace('-', ' ')}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground text-sm\">\n                        {new Date(lead.createdAt).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => handleViewLead(lead)}\n                        >\n                          <Eye className=\"h-4 w-4 mr-2\" />\n                          View\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Lead Detail Dialog */}\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Lead Details</DialogTitle>\n              <DialogDescription>\n                {selectedLead?.clientName}\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"space-y-6\">\n              {/* Lead Info */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Name</p>\n                  <p className=\"text-lg font-semibold\">{selectedLead?.name}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Company</p>\n                  <p className=\"text-lg font-semibold\">{selectedLead?.company || 'N/A'}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Email</p>\n                  <p>{selectedLead?.email}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Phone</p>\n                  <p>{selectedLead?.phone}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Source</p>\n                  <p>{selectedLead?.source}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Lead Score</p>\n                  <p className={`font-bold text-lg ${getScoreColor(selectedLead?.score || 0)}`}>\n                    {selectedLead?.score}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Status</p>\n                  <Badge className={getStatusColor(selectedLead?.status || 'new')}>\n                    {selectedLead?.status?.replace('-', ' ')}\n                  </Badge>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Interest</p>\n                  <p>{selectedLead?.interest}</p>\n                </div>\n              </div>\n\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground mb-2\">Created</p>\n                <p>{new Date(selectedLead?.createdAt || new Date()).toLocaleString()}</p>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </AdminLayout>\n  );\n}\n