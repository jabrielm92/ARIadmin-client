'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport ClientLayout from '@/components/ClientLayout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Phone, Search, CheckCircle, XCircle, Loader2 } from 'lucide-react';\n\nexport default function PhoneNumberPage() {\n  const router = useRouter();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [currentNumber, setCurrentNumber] = useState(null);\n  const [purchasing, setPurchasing] = useState(false);\n  const [areaCode, setAreaCode] = useState('');\n\n  useEffect(() => {\n    const token = localStorage.getItem('clientToken');\n    const userStr = localStorage.getItem('clientUser');\n    \n    if (!token || !userStr) {\n      router.push('/client/login');\n      return;\n    }\n    \n    try {\n      const userData = JSON.parse(userStr);\n      setUser(userData);\n      checkCurrentNumber(userData.id);\n    } catch (error) {\n      router.push('/client/login');\n    }\n  }, [router]);\n\n  const checkCurrentNumber = async (clientId) => {\n    try {\n      const response = await fetch(`/api/clients/${clientId}`);\n      const data = await response.json();\n      \n      if (data.success && data.client.services?.aiReceptionist?.phoneNumber) {\n        setCurrentNumber(data.client.services.aiReceptionist.phoneNumber);\n      }\n    } catch (error) {\n      console.error('Error checking phone number:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePurchase = async () => {\n    if (!confirm('This will purchase a phone number for $3/month. Continue?')) {\n      return;\n    }\n\n    setPurchasing(true);\n    try {\n      const response = await fetch('/api/client/phone-number', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          clientId: user.id,\n          areaCode: areaCode || null\n        })\n      });\n\n      const data = await response.json();\n      \n      if (data.success) {\n        alert(`Phone number purchased: ${data.phoneNumber.number}`);\n        setCurrentNumber(data.phoneNumber.number);\n      } else {\n        alert('Error: ' + data.error);\n      }\n    } catch (error) {\n      alert('Error: ' + error.message);\n    } finally {\n      setPurchasing(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <ClientLayout>\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Phone Number Management</h1>\n          <p className=\"text-muted-foreground\">Manage your AI receptionist phone number</p>\n        </div>\n\n        {/* Current Number Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Current Phone Number</CardTitle>\n            <CardDescription>Your dedicated phone number for AI receptionist</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {currentNumber ? (\n              <div className=\"flex items-center justify-between p-6 bg-green-50 dark:bg-green-950 border border-green-200 dark:border-green-800 rounded-lg\">\n                <div className=\"flex items-center gap-4\">\n                  <CheckCircle className=\"h-8 w-8 text-green-500\" />\n                  <div>\n                    <p className=\"text-2xl font-bold\">{currentNumber}</p>\n                    <p className=\"text-sm text-muted-foreground\">Active and ready to receive calls</p>\n                  </div>\n                </div>\n                <Badge className=\"bg-green-500\">Active</Badge>\n              </div>\n            ) : (\n              <div className=\"flex items-center justify-between p-6 bg-yellow-50 dark:bg-yellow-950 border border-yellow-200 dark:border-yellow-800 rounded-lg\">\n                <div className=\"flex items-center gap-4\">\n                  <XCircle className=\"h-8 w-8 text-yellow-500\" />\n                  <div>\n                    <p className=\"text-lg font-semibold\">No Phone Number</p>\n                    <p className=\"text-sm text-muted-foreground\">Purchase a phone number to start receiving calls</p>\n                  </div>\n                </div>\n                <Badge variant=\"secondary\">Not Configured</Badge>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Purchase Phone Number */}\n        {!currentNumber && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Purchase Phone Number</CardTitle>\n              <CardDescription>Get a dedicated phone number for your AI receptionist</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n                <p className=\"text-sm text-blue-900 dark:text-blue-100\">\n                  ðŸ’µ <strong>Pricing:</strong> $3/month for phone number + $0.05/minute for calls\n                </p>\n              </div>\n\n              <div>\n                <Label>Preferred Area Code (Optional)</Label>\n                <Input\n                  value={areaCode}\n                  onChange={(e) => setAreaCode(e.target.value.replace(/\\D/g, '').slice(0, 3))}\n                  placeholder=\"e.g., 555\"\n                  maxLength={3}\n                  className=\"w-32\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Leave blank for random assignment\n                </p>\n              </div>\n\n              <Button\n                onClick={handlePurchase}\n                className=\"w-full\"\n                size=\"lg\"\n                disabled={purchasing}\n              >\n                {purchasing ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Purchasing...\n                  </>\n                ) : (\n                  <>\n                    <Phone className=\"mr-2 h-4 w-4\" />\n                    Purchase Phone Number Now\n                  </>\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        <Card>\n          <CardHeader>\n            <CardTitle>How It Works</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ol className=\"space-y-3 text-sm\">\n              <li className=\"flex gap-3\">\n                <span className=\"font-bold text-blue-600\">1.</span>\n                <span>Purchase a dedicated phone number for your business</span>\n              </li>\n              <li className=\"flex gap-3\">\n                <span className=\"font-bold text-blue-600\">2.</span>\n                <span>Share this number with your customers</span>\n              </li>\n              <li className=\"flex gap-3\">\n                <span className=\"font-bold text-blue-600\">3.</span>\n                <span>Your AI receptionist answers all calls 24/7</span>\n              </li>\n              <li className=\"flex gap-3\">\n                <span className=\"font-bold text-blue-600\">4.</span>\n                <span>View transcripts, leads, and appointments in your dashboard</span>\n              </li>\n            </ol>\n          </CardContent>\n        </Card>\n      </div>\n    </ClientLayout>\n  );\n}\n