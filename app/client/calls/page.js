'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport ClientLayout from '@/components/ClientLayout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Phone, Search, Download, FileText, Clock, User } from 'lucide-react';\n\nexport default function ClientCalls() {\n  const router = useRouter();\n  const [loading, setLoading] = useState(true);\n  const [user, setUser] = useState(null);\n  const [calls, setCalls] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [selectedCall, setSelectedCall] = useState(null);\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  useEffect(() => {\n    const token = localStorage.getItem('clientToken');\n    const userStr = localStorage.getItem('clientUser');\n    \n    if (!token || !userStr) {\n      router.push('/client/login');\n      return;\n    }\n    \n    try {\n      const userData = JSON.parse(userStr);\n      setUser(userData);\n      fetchCalls(userData.id);\n    } catch (error) {\n      router.push('/client/login');\n    }\n  }, [router]);\n\n  const fetchCalls = async (clientId) => {\n    try {\n      const response = await fetch(`/api/client/calls?clientId=${clientId}`);\n      const data = await response.json();\n      \n      if (data.success) {\n        setCalls(data.calls);\n      }\n    } catch (error) {\n      console.error('Error fetching calls:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleViewCall = (call) => {\n    setSelectedCall(call);\n    setDialogOpen(true);\n  };\n\n  // Mock calls for display\n  const mockCalls = [\n    {\n      callId: '1',\n      phoneNumber: '+1-555-0123',\n      duration: 180,\n      status: 'completed',\n      summary: 'Customer inquired about pricing for premium service package',\n      transcript: 'Hello! Thank you for calling...\\n\\nCustomer: Hi, I want to know about your pricing\\n\\nAI: I\\'d be happy to help with that...',\n      leadData: {\n        name: 'John Doe',\n        email: 'john@example.com',\n        interest: 'Premium Service'\n      },\n      createdAt: new Date().toISOString()\n    }\n  ];\n\n  const displayCalls = calls.length > 0 ? calls : mockCalls;\n\n  const filteredCalls = displayCalls.filter(call => {\n    const matchesSearch = \n      call.phoneNumber?.includes(searchTerm) ||\n      call.summary?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === 'all' || call.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const formatDuration = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}m ${secs}s`;\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-500';\n      case 'missed':\n        return 'bg-red-500';\n      case 'voicemail':\n        return 'bg-yellow-500';\n      case 'forwarded':\n        return 'bg-blue-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <ClientLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Call History</h1>\n            <p className=\"text-muted-foreground\">View and manage your call records</p>\n          </div>\n          <Button variant=\"outline\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export\n          </Button>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid gap-4 md:grid-cols-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Calls</p>\n                  <p className=\"text-2xl font-bold\">{displayCalls.length}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">This month</p>\n                </div>\n                <Phone className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Answered</p>\n                  <p className=\"text-2xl font-bold\">{displayCalls.filter(c => c.status === 'completed').length}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">Success rate</p>\n                </div>\n                <Phone className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Avg Duration</p>\n                  <p className=\"text-2xl font-bold\">3m 0s</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">Per call</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Leads</p>\n                  <p className=\"text-2xl font-bold\">{displayCalls.filter(c => c.leadData).length}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">Captured</p>\n                </div>\n                <User className=\"h-8 w-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Call History Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Call Records</CardTitle>\n            <CardDescription>All incoming calls handled by your AI receptionist</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {/* Filters */}\n            <div className=\"flex gap-4 mb-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search calls...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-[200px]\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"missed\">Missed</SelectItem>\n                  <SelectItem value=\"voicemail\">Voicemail</SelectItem>\n                  <SelectItem value=\"forwarded\">Forwarded</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Table */}\n            {filteredCalls.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Phone className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-lg font-medium\">No calls yet</p>\n                <p className=\"text-sm text-muted-foreground\">Your call history will appear here</p>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Phone Number</TableHead>\n                    <TableHead>Duration</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Summary</TableHead>\n                    <TableHead>Date & Time</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredCalls.map((call) => (\n                    <TableRow key={call.callId}>\n                      <TableCell className=\"font-medium\">\n                        {call.phoneNumber || 'Unknown'}\n                      </TableCell>\n                      <TableCell>{formatDuration(call.duration || 0)}</TableCell>\n                      <TableCell>\n                        <Badge className={getStatusColor(call.status)}>\n                          {call.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"max-w-xs truncate\">\n                        {call.summary || 'No summary available'}\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {new Date(call.createdAt).toLocaleString()}\n                      </TableCell>\n                      <TableCell>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => handleViewCall(call)}\n                        >\n                          <FileText className=\"h-4 w-4 mr-2\" />\n                          View\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Call Detail Dialog */}\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Call Details</DialogTitle>\n              <DialogDescription>\n                {selectedCall?.phoneNumber || 'Unknown'} • {new Date(selectedCall?.createdAt || new Date()).toLocaleString()}\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"space-y-6\">\n              {/* Call Info */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Duration</p>\n                  <p className=\"text-lg font-semibold\">{formatDuration(selectedCall?.duration || 0)}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Status</p>\n                  <Badge className={getStatusColor(selectedCall?.status || 'completed')}>\n                    {selectedCall?.status}\n                  </Badge>\n                </div>\n              </div>\n\n              {/* Summary */}\n              {selectedCall?.summary && (\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Summary</h3>\n                  <p className=\"text-sm text-muted-foreground\">{selectedCall.summary}</p>\n                </div>\n              )}\n\n              {/* Lead Data */}\n              {selectedCall?.leadData && (\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Lead Information</h3>\n                  <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                    <div>\n                      <p className=\"text-muted-foreground\">Name</p>\n                      <p className=\"font-medium\">{selectedCall.leadData.name}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-muted-foreground\">Email</p>\n                      <p className=\"font-medium\">{selectedCall.leadData.email}</p>\n                    </div>\n                    <div className=\"col-span-2\">\n                      <p className=\"text-muted-foreground\">Interest</p>\n                      <p className=\"font-medium\">{selectedCall.leadData.interest}</p>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Transcript */}\n              {selectedCall?.transcript && (\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Full Transcript</h3>\n                  <div className=\"bg-muted p-4 rounded-lg\">\n                    <pre className=\"text-sm whitespace-pre-wrap font-mono\">\n                      {selectedCall.transcript}\n                    </pre>\n                  </div>\n                </div>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </ClientLayout>\n  );\n}\n